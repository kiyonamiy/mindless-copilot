package {{rootPackageName}}.{{servicePackageName}};

import javax.annotation.Resource;

import com.hyperchain.cb.domain.exception.BusinessException;
import com.hyperchain.cb.domain.exception.ErrorCode;
import org.springframework.stereotype.Service;

import {{rootPackageName}}.{{voPackageName}}.{{pascalTableName}}CreateReqVO;
import {{rootPackageName}}.{{voPackageName}}.{{pascalTableName}}UpdateReqVO;
import {{rootPackageName}}.{{voPackageName}}.{{pascalTableName}}PageReqVO;
import {{rootPackageName}}.{{domainPackageName}}.mapper.{{pascalTableName}}Mapper;
import {{rootPackageName}}.{{domainPackageName}}.dataobject.{{pascalTableName}}DO;
import {{rootPackageName}}.{{convertPackageName}}.{{pascalTableName}}Convert;

import {{rootPackageName}}.cb.common.page.dto.PageResult;

import java.util.Objects;

@Service
public class {{pascalTableName}}ServiceImpl implements {{pascalTableName}}Service {
    @Resource
    private {{pascalTableName}}Mapper {{camelTableName}}Mapper;

    @Override
    public Long create{{pascalTableName}}({{pascalTableName}}CreateReqVO {{camelTableName}}CreateReqVO) {
        // 1. 检查创建信息
        checkCreate{{pascalTableName}}({{camelTableName}}CreateReqVO);

        // 2. 写入到数据库中
        {{pascalTableName}}DO {{camelTableName}}DO = {{pascalTableName}}Convert.INSTANCE.convert({{camelTableName}}CreateReqVO);
        {{camelTableName}}Mapper.insert({{camelTableName}}DO);
        return {{camelTableName}}DO.getId();
    }

    @Override
    public void update{{pascalTableName}}({{pascalTableName}}UpdateReqVO {{camelTableName}}UpdateReqVO) {
        // 1. 检查更新信息
        checkUpdate{{pascalTableName}}({{camelTableName}}UpdateReqVO);

        // 2. 更新到数据库中
        {{pascalTableName}}DO {{camelTableName}}DO = {{pascalTableName}}Convert.INSTANCE.convert({{camelTableName}}UpdateReqVO);
        {{camelTableName}}Mapper.updateById({{camelTableName}}DO);
    }

    @Override
    public void delete{{pascalTableName}}(Long id) {
        // 1. 检查更新信息
        checkDelete{{pascalTableName}}(id);

        // 2. 从数据库中删除记录
        {{camelTableName}}Mapper.deleteById(id);
    }

    @Override
    public {{pascalTableName}}DO get{{pascalTableName}}(Long id) {
        return {{camelTableName}}Mapper.selectById(id);
    }

    @Override
    public PageResult<{{pascalTableName}}DO> get{{pascalTableName}}Page({{pascalTableName}}PageReqVO {{camelTableName}}PageReqVO) {
        return {{camelTableName}}Mapper.selectPage({{camelTableName}}PageReqVO);
    }

    private void checkCreate{{pascalTableName}} ({{pascalTableName}}CreateReqVO {{camelTableName}}CreateReqVO) {
        // todo 补充创建检查逻辑
        {{#bothEach baseColumns createRequiredColumns}}
        {{#notColumnNull this}}
        {{#isVoString this}}
        if (Objects.isNull({{../camelTableName}}CreateReqVO.get{{this.pascalName}}()) || {{../camelTableName}}CreateReqVO.get{{this.pascalName}}().trim().isEmpty()) {
            throw new BusinessException(ErrorCode.{{../uppercaseTableName}}_{{this.upperName}}_EMPTY);
            //  {{../uppercaseTableName}}_{{this.upperName}}_EMPTY({{../tableNo}}001, "{{this.comment}}不能为空"),
        }
        {{/isVoString}}
        {{/notColumnNull}}
        {{/bothEach}}
    }

    private void checkUpdate{{pascalTableName}}({{pascalTableName}}UpdateReqVO {{camelTableName}}UpdateReqVO) {
        // todo 补充更新检查逻辑
        if (!does{{pascalTableName}}Exist({{camelTableName}}UpdateReqVO.getId())) {
            throw new BusinessException(ErrorCode.{{uppercaseTableName}}_DOSE_NOT_EXIST);
            //  {{uppercaseTableName}}_DOSE_NOT_EXIST({{tableNo}}001, "该{{tableComment}}不存在"),
            // ========== {{tableComment}} {{tableNo}}000  ==========
        }
        {{#bothEach baseColumns updateRequiredColumns}}
        {{#notColumnNull this}}
        {{#isVoString this}}
        if (Objects.isNull({{../camelTableName}}UpdateReqVO.get{{this.pascalName}}()) || {{../camelTableName}}UpdateReqVO.get{{this.pascalName}}().trim().isEmpty()) {
            throw new BusinessException(ErrorCode.{{../uppercaseTableName}}_{{this.upperName}}_EMPTY);
            //  {{../uppercaseTableName}}_{{this.upperName}}_EMPTY({{../tableNo}}001, "{{this.comment}}不能为空"),
        }
        {{/isVoString}}
        {{/notColumnNull}}
        {{/bothEach}}
    }

    private void checkDelete{{pascalTableName}}(Long {{camelTableName}}Id) {
        // todo 补充删除检查逻辑
        if (!does{{pascalTableName}}Exist({{camelTableName}}Id)) {
            throw new BusinessException(ErrorCode.{{uppercaseTableName}}_DOSE_NOT_EXIST);
        }
    }

    private boolean does{{pascalTableName}}Exist(Long id) {
        {{pascalTableName}}DO {{camelTableName}}DO = {{camelTableName}}Mapper.selectById(id);
        return Objects.nonNull({{camelTableName}}DO);
    }
}
