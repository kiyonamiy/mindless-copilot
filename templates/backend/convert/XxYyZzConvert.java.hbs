package {{rootPackageName}}.convert;

import {{rootPackageName}}.domain.dataobject.{{pascalTableName}}DO;
import {{rootPackageName}}.vo.{{pascalTableName}}CreateReqVO;
import {{rootPackageName}}.vo.{{pascalTableName}}UpdateReqVO;
import {{rootPackageName}}.vo.{{pascalTableName}}RespVO;
import {{rootPackageName}}.cb.convert.BaseConvert;
import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;
{{#if filterPrimaryKeyTimeColumns}}
import org.mapstruct.Mapping;
import org.mapstruct.Mappings;
{{/if}}

import java.util.List;

@Mapper
public interface {{pascalTableName}}Convert extends BaseConvert {

    {{pascalTableName}}Convert INSTANCE = Mappers.getMapper({{pascalTableName}}Convert.class);

    {{#if filterPrimaryKeyTimeColumns}}
    @Mappings({
    {{#each filterPrimaryKeyTimeColumns}}
      @Mapping(target = "{{this.camelName}}", source = "{{this.camelName}}", qualifiedByName = "epochMillisToDateTime"),
    {{/each}}
    })
    {{/if}}
    {{pascalTableName}}DO convert({{pascalTableName}}CreateReqVO bean);

    {{#if filterPrimaryKeyTimeColumns}}
      @Mappings({
      {{#each filterPrimaryKeyTimeColumns}}
        @Mapping(target = "{{this.camelName}}", source = "{{this.camelName}}", qualifiedByName = "epochMillisToDateTime"),
      {{/each}}
      })
    {{/if}}
    {{pascalTableName}}DO convert({{pascalTableName}}UpdateReqVO bean);

    {{#if filterPrimaryKeyTimeColumns}}
      @Mappings({
      {{#each filterPrimaryKeyTimeColumns}}
        @Mapping(target = "{{this.camelName}}", source = "{{this.camelName}}", qualifiedByName = "dateTimeToEpochMillis"),
      {{/each}}
      })
    {{/if}}
    {{pascalTableName}}RespVO convert({{pascalTableName}}DO bean);

    {{#if filterPrimaryKeyTimeColumns}}
      @Mappings({
      {{#each filterPrimaryKeyTimeColumns}}
        @Mapping(target = "{{this.camelName}}", source = "{{this.camelName}}", qualifiedByName = "dateTimeToEpochMillis"),
      {{/each}}
      })
    {{/if}}
    List<{{pascalTableName}}RespVO> convertList(List<{{pascalTableName}}DO> bean);
}