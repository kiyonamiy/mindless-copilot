package {{rootPackageName}}.controller;

import com.baomidou.mybatisplus.extension.plugins.pagination.PageDTO;
import {{rootPackageName}}.common.auth.annotation.PermissionCheck;
import {{rootPackageName}}.common.page.dto.BasePageVO;
import com.hyperchain.cb.converter.{{pascalTableName}}Converter;
import {{rootPackageName}}.vo.{{pascalTableName}}CreateReqVO;
import {{rootPackageName}}.vo.{{pascalTableName}}CreateRespVO;
import {{rootPackageName}}.domain.response.Response;
import com.hyperchain.cb.dto.{{pascalTableName}}ServiceCreateDTO;
import com.hyperchain.cb.dto.{{pascalTableName}}ServiceCreateRetDTO;
import {{rootPackageName}}.service.{{pascalTableName}}Service;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;
import javax.validation.Valid;

@Tag(name = "{{index}}-{{tableComment}}", description = "{{tableComment}}接口")
@RestController
@RequestMapping("/{{hyphenTableName}}")
@Validated
public class {{pascalTableName}}Controller {

    @Resource
    private {{pascalTableName}}Service {{camelTableName}}Service;

    @PostMapping("create")
    @Operation(summary = "创建{{tableComment}}")
    @PermissionCheck(code = "{{camelTableName}}:create")
    public Response<{{pascalTableName}}CreateRespVO> create(@Valid @RequestBody {{pascalTableName}}CreateReqVO {{camelTableName}}CreateReqVO) {
        {{pascalTableName}}ServiceCreateDTO {{camelTableName}}ServiceCreateDTO = {{pascalTableName}}Converter.convert({{camelTableName}}CreateReqVO);
        {{pascalTableName}}ServiceCreateRetDTO {{camelTableName}}ServiceCreateRetDTO = {{camelTableName}}Service.create{{pascalTableName}}({{camelTableName}}ServiceCreateDTO);
        {{pascalTableName}}CreateRespVO {{camelTableName}}CreateRespVO = {{pascalTableName}}Converter.convert({{camelTableName}}ServiceCreateRetDTO);
        return new Response<>({{camelTableName}}CreateRespVO);
    }
    {{!-- @GetMapping("page")
    @Operation(summary = "分页查询{{tableComment}}")
    @PermissionCheck(code = "{{camelTableName}}:get")
    public Response<PageDTO<{{pascalTableName}}DO>> get{{pascalTableName}}Page(BasePageVO pageReqVO) {
        return new Response<>({{camelTableName}}Service.get{{pascalTableName}}Page(pageReqVO));
    }

    @DeleteMapping("delete")
    @Operation(summary = "删除{{tableComment}}")
    @PermissionCheck(code = "{{camelTableName}}:delete")
    public Response<Boolean> delete{{pascalTableName}}(@RequestParam("id") Long id) {
        {{camelTableName}}Service.delete{{pascalTableName}}(id);
        return new Response<>(Boolean.TRUE);
    }

    @PutMapping("update")
    @Operation(summary = "更新{{tableComment}}")
    @PermissionCheck(code = "{{camelTableName}}:update")
    public Response<Boolean> update{{pascalTableName}}(@Valid @RequestBody UpdateDTO updateDTO) {
        {{camelTableName}}Service.update{{pascalTableName}}(updateDTO);
        return new Response<>(Boolean.TRUE);
    }

    @GetMapping("get")
    @Operation(summary = "获取单个{{tableComment}}")
    @PermissionCheck(code = "{{camelTableName}}:get")
    public Response<{{pascalTableName}}DO> get{{pascalTableName}}(GetDTO getDTO) {
        return new Response<>({{camelTableName}}Service.get{{pascalTableName}}(getDTO));
    } --}}
}